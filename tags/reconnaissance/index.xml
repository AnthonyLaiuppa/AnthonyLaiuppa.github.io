<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>reconnaissance on Laiuppa Blog</title>
    <link>https://anthonylaiuppa.com/tags/reconnaissance/</link>
    <description>Recent content in reconnaissance on Laiuppa Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 23 Oct 2018 06:40:51 +0900</lastBuildDate>
    
        <atom:link href="https://anthonylaiuppa.com/tags/reconnaissance/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Mapping website attack surfaces</title>
        <link>https://anthonylaiuppa.com/posts/mapping-website-attack-surface/</link>
        <pubDate>Tue, 23 Oct 2018 06:40:51 +0900</pubDate>
        
        <atom:modified>Tue, 23 Oct 2018 06:40:51 +0900</atom:modified>
        <guid>https://anthonylaiuppa.com/posts/mapping-website-attack-surface/</guid>
        <description>2020 Retrospective While migrating my site years later, it&amp;rsquo;s worth mentioning theres alot of wonderful toolchains available now that really nail this. The biggest one being someone put in the work to properly parse the site-maps.
Intro Trying bug bounties can be fun, you might even walk off like a prospector with gold. Of course similar to sifting through river water looking for gold, youve got sifting through websites looking for things that catch your eye.</description>
        
        <dc:creator>Anthony Laiuppa</dc:creator>
        <media:content url="https://anthonylaiuppa.comimages/posts/mapping-website-attack-surface/map_cover.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>python</category>
            
          
            
              <category>bug bounty</category>
            
          
            
              <category>reconnaissance</category>
            
          
            
              <category>osint</category>
            
          
            
              <category>hacking</category>
            
          
        
        
          
            
              <category>hacking</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Breaking into penetration testing</title>
        <link>https://anthonylaiuppa.com/posts/breaking-into-penetration-testing/</link>
        <pubDate>Fri, 27 Oct 2017 06:40:51 +0900</pubDate>
        
        <atom:modified>Fri, 27 Oct 2017 06:40:51 +0900</atom:modified>
        <guid>https://anthonylaiuppa.com/posts/breaking-into-penetration-testing/</guid>
        <description>Intro Recently I decided I wanted to begin preparing for the OSCP, which for those who arent familiar stands Offensive Security Certified Professional. Its a fairly difficult exam with a large scope of material to cover. I decided to start by focusing on the process of Penetration testing. Penetration testing is an important part of the exam, and something that I still havent done an immense amount of. So I decided it was time to spin up a virtual testing range and go at it.</description>
        
        <dc:creator>Anthony Laiuppa</dc:creator>
        <media:content url="https://anthonylaiuppa.comimages/posts/breaking-into-penetration-testing/generateVM.PNG" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>hacking</category>
            
          
            
              <category>kali</category>
            
          
            
              <category>virtualization</category>
            
          
            
              <category>nmap</category>
            
          
            
              <category>metasploit</category>
            
          
            
              <category>exploitation</category>
            
          
            
              <category>reconnaissance</category>
            
          
        
        
          
            
              <category>hacking</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Enumerating URL shorteners</title>
        <link>https://anthonylaiuppa.com/posts/enumerating-url-shorteners/</link>
        <pubDate>Wed, 11 Jan 2017 06:40:51 +0900</pubDate>
        
        <atom:modified>Wed, 11 Jan 2017 06:40:51 +0900</atom:modified>
        <guid>https://anthonylaiuppa.com/posts/enumerating-url-shorteners/</guid>
        <description>Intro I was at work when I almost dropped a URL into goo.gl, you know because short URLs are awesome. However I stopped right before I dropped it in because Google was kind enough to tell me that all URLs shortened are public. Then it occured to me that just haphazardly dropping links in is of course an OPSec issue. With billions of shortened URLs in existence is it really though?</description>
        
        <dc:creator>Anthony Laiuppa</dc:creator>
        <media:content url="https://anthonylaiuppa.comimages/posts/enumerating-url-shorteners/oddstuff.PNG" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>enumeration</category>
            
          
            
              <category>python</category>
            
          
            
              <category>hacking</category>
            
          
            
              <category>reconnaissance</category>
            
          
            
              <category>osint</category>
            
          
        
        
          
            
              <category>security</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>