<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>scraping on Laiuppa Blog</title>
    <link>https://anthonylaiuppa.com/tags/scraping/</link>
    <description>Recent content in scraping on Laiuppa Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 24 Apr 2020 06:40:51 +0900</lastBuildDate>
    
        <atom:link href="https://anthonylaiuppa.com/tags/scraping/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Effortless API Scraping With Golang</title>
        <link>https://anthonylaiuppa.com/posts/golang-api-scraping/</link>
        <pubDate>Fri, 24 Apr 2020 06:40:51 +0900</pubDate>
        
        <atom:modified>Fri, 24 Apr 2020 06:40:51 +0900</atom:modified>
        <guid>https://anthonylaiuppa.com/posts/golang-api-scraping/</guid>
        <description>Intro The internet is chock full of information, and often times there is a need to aggregate it in order to gain insights through additional analysis. To that end, scraping information from the internet can become somewhat reptitive.
Here we&amp;rsquo;ll explore a simple approach to automating part of the process of writing the code to retrieve information from the web.
Overview With the bulk of the internet transitioning to more decoupled models we are seeing more and more API&amp;rsquo;s.</description>
        
        <dc:creator>Anthony Laiuppa</dc:creator>
        <media:content url="https://anthonylaiuppa.comimages/posts/golang-scraping/gopher.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>programming</category>
            
          
            
              <category>golang</category>
            
          
            
              <category>scraping</category>
            
          
            
              <category>automation</category>
            
          
        
        
          
            
              <category>programming</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Terraforming complete AWS-Kubernetes clusers</title>
        <link>https://anthonylaiuppa.com/posts/one-command/</link>
        <pubDate>Sun, 27 Jan 2019 06:40:51 +0900</pubDate>
        
        <atom:modified>Sun, 27 Jan 2019 06:40:51 +0900</atom:modified>
        <guid>https://anthonylaiuppa.com/posts/one-command/</guid>
        <description>Intro While working on getting better with Terraform I noticed there weren&amp;rsquo;t alot of examples of Kubernetes and AWS being provisioned at the same time. I forked the sample code provided by the Terraform project, and modularized it. From there I was able to add in a Kubernetes provider and patch in authentication. This allows us to create and provision Kubernetes architecture in AWS with a single command. To give a service to demonstrate, I&amp;rsquo;ve written a simple API endpoint in Golang and accompanying React front end.</description>
        
        <dc:creator>Anthony Laiuppa</dc:creator>
        <media:content url="https://anthonylaiuppa.comimages/posts/one-command/legowall.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>programming</category>
            
          
            
              <category>golang</category>
            
          
            
              <category>scraping</category>
            
          
            
              <category>automation</category>
            
          
        
        
          
            
              <category>programming</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Making the packtbot</title>
        <link>https://anthonylaiuppa.com/posts/packt-bot/</link>
        <pubDate>Mon, 10 Jul 2017 06:40:51 +0900</pubDate>
        
        <atom:modified>Mon, 10 Jul 2017 06:40:51 +0900</atom:modified>
        <guid>https://anthonylaiuppa.com/posts/packt-bot/</guid>
        <description>Intro Slack is an effective group communication tool that Ive found myself using quite a bit recently. It simplifies communication greatly eliminating the need for multiple apps.
With Slack Im able to interact with work, side projects, and the programming community with one application.
Where Packt comes into play, is that for the last couple of weeks Ive had a colleague posting packts deal of the day in one of our slack channels daily.</description>
        
        <dc:creator>Anthony Laiuppa</dc:creator>
        <media:content url="https://anthonylaiuppa.comimages/posts/packt-bot/packtbot.PNG" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>python</category>
            
          
            
              <category>web</category>
            
          
            
              <category>scraping</category>
            
          
        
        
          
            
              <category>programming</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>